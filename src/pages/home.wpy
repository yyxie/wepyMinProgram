<style lang="less">
  .image-wrapper {
    display: flex;
    flex-wrap: wrap;
  }

  .image-list-item {
    margin: 10px;
  }
</style>
<template>
  <view class="container">
    <view class="image-wrapper">
      <view class="image-list-item"
            wx:for="{{imgList}}"
            wx:item="item"
            wx:key="id"
      >
        <image src="{{item.picUrl}}"
               style="width: 100px; height:100px;"
               @tap="previewImg({{index}})"></image>
      </view>
      <UploadImg :imgList.sync="imgList" style="width: 100px; height:100px;" />
    </view>
    <ImgPreview :show.sync="isPreview" :imgList.sync="imgList" @close.user="closeImgPreview" @del.user="delImg"
                hasDel="{{true}}" :currentImg.sync="currentImg" />
  </view>
</template>

<script>
  import wepy from 'wepy'
  import UploadImg from '../components/uploadImg'
  import ImgPreview from '../components/ImgPreview'

  export default class Home extends wepy.page {
    config = {
      navigationBarTitleText: '首页'
    }
    components = {
      ImgPreview,
      UploadImg
    }

    mixins = []

    data = {
      uploadImgStyle: 'width: 100px; height:100px;',
      isPreview: false,
      imgList: [{
        id: 1,
        picUrl: '../images/list-empty.png'
      }, {
        id: 2,
        picUrl: '../images/list-empty-collect.png'
      }, {
        id: 3,
        picUrl: '../images/list-empty-house.png'
      }, {
        id: 4,
        picUrl: '../images/list-empty-yuyue.png'
      }],
      currentImg: 0
    }

    computed = {}

    methods = {
      closeImgPreview() {
        this.isPreview = false
      },
      delImg() {
        const id = this.imgList[this.currentImg].id
        this.imgList = this.imgList.filter((item) => {
          return item.id != id
        })
      }
    }
    watch = {
      imgList(newValue, oldValue) {
        debugger
      }
    }

    closeImgPreview() {
      this.isPreview = false
    }

    previewImg(index) {
      debugger
      this.currentImg = index
      this.isPreview = true
    }

    onLoad() {
    }
  }
</script>
